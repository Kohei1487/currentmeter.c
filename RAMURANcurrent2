#include <stdio.h>
#include <pigpio.h>
#include <unistd.h>

#define ADS1115_ADDRESS 0x48 // ADS1115のI2Cアドレス

// ADS1115のレジスタ定義
#define CONVERSION_REG 0x00
#define CONFIG_REG 0x01

// ADS1115の設定
#define CONFIG_OS_SINGLE (0x8000) // シングルショット開始
#define CONFIG_MUX_SINGLE_0 (0x4000) // AIN0ピンを使用
#define CONFIG_GAIN_2_048V (0x0200) // +/-2.048Vの範囲
#define CONFIG_MODE_SINGLE (0x0100) // シングルショットモード
#define CONFIG_DR_128SPS (0x0080) // データレートを128SPSに設定
#define CONFIG_COMP_QUE_DISABLE (0x0003) // コンパレータ無効

int readADC(int handle);
void setupADC(int handle);

int main() {
    if (gpioInitialise() < 0) {
        printf("pigpioの初期化に失敗しました。\n");
        return -1;
    }

    int handle = i2cOpen(1, ADS1115_ADDRESS, 0); // I2Cバス1を使用
    if (handle < 0) {
        printf("ADS1115に接続できませんでした。\n");
        return -1;
    }

    setupADC(handle); // ADCの初期設定

    while (1) {
        int raw_value = readADC(handle); // ADCからの生データを取得
        double voltage = raw_value * 0.000125; // 16ビットADCのスケーリング（±2.048Vでの変換）
        
        // 電流センサーに基づく電流計算 (例: ACS712-5A)
        double sensitivity = 0.185; // 185mV/A (ACS712-5A)
        double current = (voltage - 2.5) / sensitivity; // 電圧オフセットは2.5V
        
        printf("電圧: %.4f V, 電流: %.4f A\n", voltage, current);
        
        sleep(1); // 1秒待機
    }

    i2cClose(handle);
    gpioTerminate();
    return 0;
}

void setupADC(int handle) {
    // 設定レジスタに書き込み
    int config = CONFIG_OS_SINGLE | CONFIG_MUX_SINGLE_0 | CONFIG_GAIN_2_048V |
                 CONFIG_MODE_SINGLE | CONFIG_DR_128SPS | CONFIG_COMP_QUE_DISABLE;
    i2cWriteWordData(handle, CONFIG_REG, ((config >> 8) & 0xFF) | ((config & 0xFF) << 8));
}

int readADC(int handle) {
    // 変換レジスタからデータを読み取る
    int raw_value = i2cReadWordData(handle, CONVERSION_REG);

    // エンディアン変換が必要 (pigpioはリトルエンディアンを使用)
    raw_value = ((raw_value << 8) & 0xFF00) | ((raw_value >> 8) & 0x00FF);
    
    return raw_value;
}
